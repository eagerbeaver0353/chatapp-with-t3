generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:db/db.sqlite"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                   String        @id @default(cuid())
    name                 String?
    email                String?       @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    createdConversations Conversation? @relation("createdConversations")
    joinedConversations  Conversation? @relation("receivedConversations")
    Message              Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Conversation {
    id            String    @id @default(cuid())
    creatorID     String    @unique
    recipientID   String    @unique
    lastMsgSentID Int?      @unique
    messages      Message[]
    creator       User      @relation("createdConversations", fields: [creatorID], references: [id])
    recipient     User      @relation("receivedConversations", fields: [recipientID], references: [id])
    lastMsgSent   Message?  @relation("lastMsgSent", fields: [lastMsgSentID], references: [id])
}

model Message {
    id             Int           @id @unique @default(autoincrement())
    authorID       String
    conversationID String
    content        String
    createdAt      DateTime      @default(now())
    author         User          @relation(fields: [authorID], references: [id])
    sentInto       Conversation  @relation(fields: [conversationID], references: [id], onDelete: Cascade, onUpdate: Cascade)
    lastSentInto   Conversation? @relation("lastMsgSent")
}
